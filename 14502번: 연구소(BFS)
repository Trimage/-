#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void read(vector<vector<int>>& arr, vector<vector<bool>>& visit, vector<pair<int, int>>& wall) {
	int row, col;
	cin >> row >> col;

	arr.clear();
	arr.resize(row, vector<int>(col));

	visit.clear();
	visit.resize(row, vector<bool>(col, false));

	for (int i = 0;i < row;i++) {
		for (int j = 0; j < col; j++) {
			cin >> arr[i][j];
			if (arr[i][j] == 0) wall.push_back(make_pair(i, j));	//0인 경우 벽을 칠 수 있으므로 좌표를 저장
		}
	}
}

int dx[] = { 0,0,1,-1 };
int dy[] = { 1,-1,0,0 };

int safe_zone_count(const vector<vector<int>>& arr) {
	//안전영역의 크기를 조사하여 출력

	int cnt = 0;

	for (int i = 0;i < arr.size();i++) {
		for (int j = 0;j < arr[i].size();j++) {
			if (arr[i][j] == 0) cnt++;
		}
	}

	return cnt;
}

void bfs(int y, int x, vector<vector<int>>& arr, vector<vector<bool>>& visit) {
	//바이러스를 퍼트리는 기능
	queue<pair<int, int>> Q;			//BFS수행을 위한 Queue 선언

	visit[y][x] = true;
	Q.push(make_pair(y, x));
	
	while (!Q.empty()) {
		int yy, xx;
		yy = Q.front().first;
		xx = Q.front().second;

		Q.pop();

		int ay, ax;

		for (int i = 0;i < 4;i++) {
			ay = yy + dy[i];
			ax = xx + dx[i];

			if (ay >= 0 && ay < arr.size() && ax >= 0 && ax < arr[ay].size() && arr[ay][ax] == 0 && !visit[ay][ax]) {
				visit[ay][ax] = true;
				arr[ay][ax] = 2;
				Q.push(make_pair(ay, ax));
			}
		}
	}
}

void virus_spread(vector<vector<int>>& arr, vector<vector<bool>>& visit) {
	//연구소 내 2가 확인되는 경우 BFS로 확인하여 바이러스를 퍼뜨림

	for (int i = 0;i < arr.size();i++) {
		for (int j = 0;j < arr[i].size();j++) {
			if (arr[i][j] == 2) bfs(i, j, arr, visit);
		}
	}

}


int solve(const vector<vector<int>>& arr, const vector<vector<bool>>& visit, vector<pair<int, int>>& wall) {

	int answer = 0;

	vector<vector<int>> copy_arr(arr.begin(), arr.end());
	vector<vector<bool>> copy_visit(visit.begin(), visit.end());

	for (int i = 0;i < wall.size();i++) {		//wall의 데이터를 브루트포스를 통해 안전최소영역을 구함
		for (int j = i + 1;j < wall.size();j++) {
			for (int k = j + 1;k < wall.size();k++) {
				copy_arr.assign(arr.begin(), arr.end());		//copy_arr에 배열arr을 복사하여 저장
				copy_visit.assign(visit.begin(), visit.end());

				copy_arr[wall[i].first][wall[i].second] = 1;
				copy_arr[wall[j].first][wall[j].second] = 1;
				copy_arr[wall[k].first][wall[k].second] = 1;

				virus_spread(copy_arr, copy_visit);				//연구소 내 2가 확인되면 바이러스를 퍼뜨림

				int cnt = safe_zone_count(copy_arr);
				answer = answer < cnt ? cnt : answer;

			}
		}
	}

	return answer;
}

int main() {
    ios_base::sync_with_stdio(false);
    cout.tie(NULL);
    cin.tie(NULL);
    
	vector<vector<int>> arr;		//연구소 내 지도 정보 저장
	vector<vector<bool>> visit;		//탐색 시 연구소 내 방문여부 저장
	vector<pair<int, int>> wall;	//벽을 칠 수 있는 좌표를 저장 (row,col 값)

	read(arr, visit, wall);		//연구소 내 지도 정보를 입력하고, 벽 치기가 가능한 좌표를 wall에 저장함
	cout << solve(arr, visit, wall);		//안전 영역의 크기의 최대값을 구함	

	return 0;
}
