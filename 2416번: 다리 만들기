#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int dy[] = {0, 0, 1, -1};
int dx[] = {1, -1, 0, 0};

// 섬 번호 입력
void dfs(int& num, int y, int x, vector<vector<int>>& arr, vector<vector<int>>& group){
	group[y][x] = num;
	
	for(int i=0;i<4;i++) {
		int ay = y + dy[i];
		int ax = x + dx[i];
		
		if(ay >=0 && ay < arr.size() && ax >=0 && ax < arr[ay].size() && arr[ay][ax] == 1 && group[ay][ax] == 0)
			dfs(num, ay, ax, arr, group);
	}
}

// 주변에 바다가 있는지 확인(있는경우 true 반환)
bool check_around_sea(int y, int x, vector<vector<int>>& arr){
    int ay, ax;
    for(int i=0;i<4;i++){
        ay = y + dy[i];
		ax = x + dx[i];
		
		if(ay >=0 && ay < arr.size() && ax >=0 && ax < arr[ay].size() && arr[ay][ax] == 0)
            return true;
    }
    return false;
}

// 다른육지까지의 최소거리 반환
int bfs(int& n, int y, int x, vector<vector<int>>& arr, vector<vector<int>>& group){
	queue<pair<pair<int,int>, int>> q;
	vector<vector<bool>> visit(n, vector<bool>(n,false));
	
	visit[y][x] = true;
	int cur_group = group[y][x];
	
	q.push(make_pair(make_pair(y,x), 0));
	
	while(!q.empty()){
		y = q.front().first.first;
		x = q.front().first.second;
		int cnt = q.front().second;
		
		q.pop();
		
		for(int i=0;i<4;i++) {
			int ay = y + dy[i];
			int ax = x + dx[i];
		
			if(ay >=0 && ay < arr.size() && ax >=0 && ax < arr[ay].size()){
				if(arr[ay][ax] == 1 && group[ay][ax] != cur_group) return cnt;
				else if(arr[ay][ax] == 0 && !visit[ay][ax]) {
					visit[ay][ax] = true;
					q.push(make_pair(make_pair(ay, ax), cnt + 1));
				}
			}
		}
	}
	
	return n*n;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
		
	
	int n;
	cin >> n;
	
	vector<vector<int>> arr(n, vector<int>(n));
	vector<vector<int>> group(n, vector<int>(n, 0));
	
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++) {
			cin >> arr[i][j];
		}
	}
	
	int num = 1;
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++) {
			if(arr[i][j]==1 && group[i][j] == 0) {
				dfs(num, i, j, arr, group);
				num++;
			}
		}
	}
	
	int answer = n*n;
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++) {
			if(arr[i][j] == 1 && check_around_sea(i, j, arr)) {
				int num = bfs(n, i, j, arr, group);
				answer = answer > num ? num : answer;
			}
		}
	}
	
	cout << answer;
	
	return 0;
}
