#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void read(vector<vector<int>>& arr, vector<bool>& visit) {
	int n;
	cin >> n;

	arr.clear();
	visit.clear();

	arr.resize(n, vector<int>(n, 0));
	visit.resize(n, false);
	
	for (int i = 0;i < n;i++) {
		for (int j = 0;j < n;j++) {
			cin >> arr[i][j];
		}
	}
}

void answer_output(vector<bool>& visit) {
	for (int k = 0;k < visit.size();k++) {
		if(visit[k]) cout << "1 ";
        else cout << "0 ";
	}
	cout << '\n';
}

void solve(vector<vector<int>>& arr, vector<bool>& visit) {

	queue<int> Q;		//BFS수행을 위한 queue 선언, 탐색해야 할 정점의 번호를 저장

	for (int i = 0;i < arr.size();i++) {
		for (int j = 0;j < arr.size();j++) {
			if (arr[i][j] == 1) Q.push(j);
		}

		while (!Q.empty()) {
			int idx = Q.front();
			Q.pop();

			visit[idx] = true;
			
			for (int k = 0;k < arr.size();k++) {
				if (arr[idx][k] == 1 && !visit[k]) {
					Q.push(k);
				}
			}
		}

		answer_output(visit);
		fill(visit.begin(), visit.end(), false);
	}
}

int main() {	
	vector<vector<int>> arr;		//그래프의 인접행렬 저장
	vector<bool> visit;		//그래프 방문여부 저장
	
	read(arr, visit);			//그래프 인접행렬 입력
	solve(arr, visit);			//BFS 수행 후 정답 출력
	
	return 0;
}
