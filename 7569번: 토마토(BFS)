#include <iostream>
#include <vector>
#include <queue>

using namespace std;


class idx {
public:
	int floor;
	int row;
	int col;

	idx(int a, int b, int c) : floor(a), row(b), col(c) {};
  
};


void read(vector<vector<vector<int>>>& arr, vector<vector<vector<int>>>& cnt) {
	int col, row, floor;
	cin >> col >> row >> floor;

	arr.resize(floor, vector<vector<int>>(row,vector<int>(col,0)));
	cnt.resize(floor, vector<vector<int>>(row, vector<int>(col, -1)));

	for (int i = 0;i < floor; i++) {
		for (int j = 0; j < row; j++) {
			for (int k = 0;k < col;k++) {
				cin >> arr[i][j][k];
			}
		}
	}
}


void solve_init(queue<idx>& Q, vector<vector<vector<int>>>& arr, vector<vector<vector<int>>>& cnt) {

	int floor = arr.size();
	int row = arr[0].size();
	int col = arr[0][0].size();

	for (int i = 0;i < floor;i++) {
		for (int j = 0;j < row; j++) {
			for (int k = 0;k < col;k++) {
				if (arr[i][j][k] == 1) {
					Q.push(idx(i, j, k));
					cnt[i][j][k] = 0;
				}
			}
		}
	}
}


void bfs(queue<idx>& Q, vector<vector<vector<int>>>& arr, vector<vector<vector<int>>>& cnt) {
	int dx[] = { 0,0,0,0,1,-1 };
	int dy[] = { 0,0,-1,1,0,0 };
	int dz[] = { 1,-1,0,0,0,0 };
	
	while (!Q.empty()) {
		int x = Q.front().col;
		int y = Q.front().row;
		int z = Q.front().floor;

		Q.pop();

		for (int i = 0;i < 6;i++) {
			int xx, yy, zz;
			xx = x + dx[i];
			yy = y + dy[i];
			zz = z + dz[i];

			if (zz >= 0 && zz < arr.size() && yy >= 0 && yy < arr[zz].size() && xx >=0 && xx < arr[zz][yy].size() && arr[zz][yy][xx] == 0 && cnt[zz][yy][xx] == -1) {
				Q.push(idx(zz,yy,xx));
				arr[zz][yy][xx] = 1;
				cnt[zz][yy][xx] = cnt[z][y][x] + 1;
			}
		}
	}
}


int solve(const vector<vector<vector<int>>>&arr, const vector<vector<vector<int>>>& cnt) {
	int floor = cnt.size();
	int row = cnt[0].size();
	int col = cnt[0][0].size();

	int answer = 0;

	for (int i = 0;i < floor;i++) {
		for (int j = 0;j < row; j++) {
			for (int k = 0;k < col;k++) {
				if (arr[i][j][k] == 0) return -1;
				answer = answer < cnt[i][j][k] ? cnt[i][j][k] : answer;
			}
		}
	}

	return answer;
}


int main() {
	vector<vector<vector<int>>> arr;
	vector<vector<vector<int>>> cnt;
	queue<idx> Q;

	read(arr,cnt);

	solve_init(Q, arr, cnt);
	bfs(Q, arr, cnt);
	
	cout << solve(arr,cnt);

	return 0;
}
