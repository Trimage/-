#include <iostream>
#include <vector>
#include <queue>

#define INF 1000001

using namespace std;

void dijkstra(int start, vector<int>& arr, vector<vector<int>>& edge) {
	arr[start] = 0;
	
	priority_queue<pair<int,int>> q;
	q.push(make_pair(0, start));
	
	while(!q.empty()){
		int cnt = -q.top().first;
		int cur = q.top().second;
		q.pop();
		
		if(arr[cur] < cnt) continue;
		
		for(int i=0;i<edge[cur].size();i++) {
			int val = cnt + 1;
			int next = edge[cur][i];
			
			if(arr[next] > val) {
				arr[next] = val;
				q.push(make_pair(-val, next));
			}
		}
	}
	
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
	
	int city, road, k, start;
	
	cin>> city >> road >> k >> start;
	
	vector<int> arr(city+1, INF);
	vector<vector<int>> edge(city+1);
	
	for(int i=0;i<road;i++) {
		int a, b;
		cin >> a >> b;
		
		edge[a].push_back(b);
	}
	
	dijkstra(start, arr, edge);
	
	int cnt = 0;
	for(int i=1;i<=city;i++) {
		if(arr[i] == k) {
			cnt++;
			cout << i << '\n';
		}
	}
	
	if(cnt == 0) cout << -1;
	
	return 0;
}
