#include <iostream>
#include <vector>
#include <queue>
#include <map>

using namespace std;

void init(int& start, int& target) {
	cin >> start >> target;
}

int solve(const int start, const int target) {
    if(start==target) return 0;

	map<int, int> M;		//해당 숫자에 대해 가장 빠른시간이 저장됨 <해당 숫자, 가장 빠른 시간>
	queue<pair<int, int>> Q;			//BFS 탐색에 사용 됨 <위치정보, 이동시간>이 저장
	vector<int> route;			//이동경로 저장, 현위치가 X 인경우 { X-1, X+1, X*2} 저장

    M[start] = 0;
	Q.push(make_pair(start, 0));

	while (!Q.empty()) {
		int current, cnt;
		current = Q.front().first;
		cnt = Q.front().second;

		Q.pop();

		route = { current - 1, current + 1, current * 2 };

		for (int i = 0;i < 3;i++) {
			if (M.find(route[i]) == M.end()) {
				M[route[i]] = cnt + 1;
				Q.push(make_pair(route[i], M[route[i]]));
			}
		}

		if (M.find(target) != M.end()) return M[target];
	}

	return -1;
}

int main() {
	int start, target;
	init(start, target);
	
	cout << solve(start, target);

	return 0;
}
