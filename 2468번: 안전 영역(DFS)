#include <iostream>
#include <vector>

using namespace std;

int read(vector<vector<int>>& arr) {
	int maxim = 0;
	int num;

	cin >> num;

	arr.resize(num, vector<int>(num));

	for (int i = 0;i < num;i++) {
		for (int j = 0;j < num;j++) {
			cin >> arr[i][j];
			if (arr[i][j] > maxim) maxim = arr[i][j];
		}
	}

	return maxim;
}

int dx[] = { 0,0,1,-1 };
int dy[] = { 1,-1,0,0 };


void dfs(int y, int x, int height, const vector<vector<int>>& arr, vector<vector<bool>>& visit) {
	if (visit[y][x]) return;

	visit[y][x] = true;

	for (int i = 0;i < 4;i++) {
		int ay = y + dy[i];
		int ax = x + dx[i];

		if (ay >= 0 && ay < arr.size() && ax >= 0 && ax < arr.size() && arr[ay][ax] > height && !visit[ay][ax])
			dfs(ay, ax, height, arr, visit);
	}
}

int solve(int maxim, vector<vector<int>>& arr, vector<vector<bool>>& visit) {
	int size = arr.size();
	int answer = 0;

	for (int height = 0;height <= maxim;height++) {
		int cnt = 0;

		visit.clear();
		visit.resize(arr.size(), vector<bool>(arr.size(), false));

		for (int i = 0;i < size;i++) {
			for (int j = 0;j < size;j++) {
				if (arr[i][j] > height && !visit[i][j]) {
					dfs(i, j, height, arr, visit);			//안전한 영역 세기
					cnt++;
				}
			}
		}

		answer = answer < cnt ? cnt : answer;
	}

	return answer;
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
	vector<vector<int>> arr;
	vector<vector<bool>> visit;	//물에 잠김여부 체크

	int maxim;

	maxim = read(arr);				//지역의 높이 정보 입력하고 안전높이 이하는 물에 잠김 표시
	cout << solve(maxim, arr, visit);		//높이를 1부터 증가하면서 안전한 영역의 최대값을 구함 

	return 0;
}
